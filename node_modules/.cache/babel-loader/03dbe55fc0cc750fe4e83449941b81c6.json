{"ast":null,"code":"import { useEffect, useState, useRef, useCallback } from 'react';\nimport { initialState } from '../../reducers/productReducer';\n\nfunction useLocalStorage(key) {\n  const [state, setState] = useState(window.localStorage.getItem(key) !== null || undefined ? window.localStorage.getItem(key) : null);\n  let values = useRef([]); // Consider just having the key as a useRef with return callbacks for setting and getting data\n\n  console.log(values.current);\n  useEffect(() => {\n    window.localStorage.setItem(key, values);\n  }, [key]);\n  return {\n    state,\n    setState,\n    addValue: useCallback(value => {\n      values.current.push(value);\n    }, [])\n  };\n}\n\nexport default useLocalStorage;","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/src/components/custom_hooks/useLocalStorage.js"],"names":["useEffect","useState","useRef","useCallback","initialState","useLocalStorage","key","state","setState","window","localStorage","getItem","undefined","values","console","log","current","setItem","addValue","value","push"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,EAAsCC,WAAtC,QAAyD,OAAzD;AACA,SAASC,YAAT,QAA6B,+BAA7B;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAChCQ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,MAAqC,IAArC,IAA6CM,SAA7C,GACIH,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CADJ,GAEI,IAH4B,CAAlC;AAKA,MAAIO,MAAM,GAAGX,MAAM,CAAC,EAAD,CAAnB,CAN4B,CAO5B;;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,MAAM,CAACC,YAAP,CAAoBO,OAApB,CAA4BX,GAA5B,EAAiCO,MAAjC;AACD,GAFQ,EAEN,CAACP,GAAD,CAFM,CAAT;AAIA,SAAO;AACLC,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLU,IAAAA,QAAQ,EAAEf,WAAW,CAAEgB,KAAD,IAAW;AAC/BN,MAAAA,MAAM,CAACG,OAAP,CAAeI,IAAf,CAAoBD,KAApB;AACD,KAFoB,EAElB,EAFkB;AAHhB,GAAP;AAOD;;AACD,eAAed,eAAf","sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { initialState } from '../../reducers/productReducer';\r\n\r\nfunction useLocalStorage(key) {\r\n  const [state, setState] = useState(\r\n    window.localStorage.getItem(key) !== null || undefined\r\n      ? window.localStorage.getItem(key)\r\n      : null\r\n  );\r\n  let values = useRef([]);\r\n  // Consider just having the key as a useRef with return callbacks for setting and getting data\r\n  console.log(values.current);\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, values);\r\n  }, [key]);\r\n\r\n  return {\r\n    state,\r\n    setState,\r\n    addValue: useCallback((value) => {\r\n      values.current.push(value);\r\n    }, []),\r\n  };\r\n}\r\nexport default useLocalStorage;\r\n"]},"metadata":{},"sourceType":"module"}