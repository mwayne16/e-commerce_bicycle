{"ast":null,"code":"var _jsxFileName = \"E:\\\\React_Projects\\\\e-commerce_bicycle\\\\src\\\\components\\\\modals\\\\cartContext.js\";\nimport React from 'react';\nimport useLocalStorage from '../custom_hooks/useLocalStorage';\nconst formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2\n});\nconst CartItemsContext = React.createContext();\n\nconst CartProvider = props => {\n  const [products, setProduct] = useLocalStorage('selected-products', []); // const prices = products.map((product) =>\n  //   val.push(product.price * product.quanity)\n  // );\n\n  const subTotal = products.length >= 1 ? products.map(product => parseFloat(product.price) * product.quanity).reduce((acc, curr) => formatter.format(acc + curr)) : 0;\n  return React.createElement(CartItemsContext.Provider, {\n    value: {\n      products,\n      setProduct,\n      subTotal\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, props.children);\n};\n\nexport { CartItemsContext, CartProvider };","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/src/components/modals/cartContext.js"],"names":["React","useLocalStorage","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","CartItemsContext","createContext","CartProvider","props","products","setProduct","subTotal","length","map","product","parseFloat","price","quanity","reduce","acc","curr","format","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAC/CC,EAAAA,KAAK,EAAE,UADwC;AAE/CC,EAAAA,QAAQ,EAAE,KAFqC;AAG/CC,EAAAA,qBAAqB,EAAE;AAHwB,CAA/B,CAAlB;AAKA,MAAMC,gBAAgB,GAAGR,KAAK,CAACS,aAAN,EAAzB;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBZ,eAAe,CAAC,mBAAD,EAAsB,EAAtB,CAA9C,CAD8B,CAE9B;AACA;AACA;;AAEA,QAAMa,QAAQ,GACZF,QAAQ,CAACG,MAAT,IAAmB,CAAnB,GACIH,QAAQ,CACLI,GADH,CACQC,OAAD,IAAaC,UAAU,CAACD,OAAO,CAACE,KAAT,CAAV,GAA4BF,OAAO,CAACG,OADxD,EAEGC,MAFH,CAEU,CAACC,GAAD,EAAMC,IAAN,KAAerB,SAAS,CAACsB,MAAV,CAAiBF,GAAG,GAAGC,IAAvB,CAFzB,CADJ,GAII,CALN;AAMA,SACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAAEX,MAAAA,QAAF;AAAYC,MAAAA,UAAZ;AAAwBC,MAAAA;AAAxB,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACc,QADT,CADF;AAKD,CAjBD;;AAmBA,SAASjB,gBAAT,EAA2BE,YAA3B","sourcesContent":["import React from 'react';\r\nimport useLocalStorage from '../custom_hooks/useLocalStorage';\r\nconst formatter = new Intl.NumberFormat('en-US', {\r\n  style: 'currency',\r\n  currency: 'USD',\r\n  minimumFractionDigits: 2,\r\n});\r\nconst CartItemsContext = React.createContext();\r\nconst CartProvider = (props) => {\r\n  const [products, setProduct] = useLocalStorage('selected-products', []);\r\n  // const prices = products.map((product) =>\r\n  //   val.push(product.price * product.quanity)\r\n  // );\r\n\r\n  const subTotal =\r\n    products.length >= 1\r\n      ? products\r\n          .map((product) => parseFloat(product.price) * product.quanity)\r\n          .reduce((acc, curr) => formatter.format(acc + curr))\r\n      : 0;\r\n  return (\r\n    <CartItemsContext.Provider value={{ products, setProduct, subTotal }}>\r\n      {props.children}\r\n    </CartItemsContext.Provider>\r\n  );\r\n};\r\n\r\nexport { CartItemsContext, CartProvider };\r\n"]},"metadata":{},"sourceType":"module"}