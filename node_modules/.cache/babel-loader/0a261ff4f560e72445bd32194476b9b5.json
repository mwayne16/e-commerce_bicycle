{"ast":null,"code":"var _jsxFileName = \"E:\\\\React_Projects\\\\e-commerce_bicycle\\\\src\\\\components\\\\context\\\\productContext.js\";\nimport React, { useReducer, useEffect, useState } from 'react';\nimport { reducer } from '../../reducers/productReducer';\nimport useDataFetching from './../custom_hooks/useDataFetching'; // Try setting the useDataFetching hook here\n\nconst ProductContext = React.createContext(null);\n\nconst ProductProvider = props => {\n  const [pagedResults, setResults] = useState();\n  const {\n    results,\n    loading\n  } = useDataFetching('https://raw.githubusercontent.com/mwayne16/e-commerce_bicycle/master/src/components/data/application.json');\n\n  async function init(initialState) {\n    try {\n      if (!loading) {\n        await setResults([...results]);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    return {\n      items: pagedResults,\n      filteredItems: []\n    };\n  }\n\n  const [products, dispatch] = useReducer(reducer, init);\n  return loading ? React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Loading....\") : React.createElement(ProductContext.Provider, {\n    value: {\n      products,\n      dispatch\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, props.children);\n};\n\nexport { ProductContext, ProductProvider };","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/src/components/context/productContext.js"],"names":["React","useReducer","useEffect","useState","reducer","useDataFetching","ProductContext","createContext","ProductProvider","props","pagedResults","setResults","results","loading","init","initialState","err","console","log","items","filteredItems","products","dispatch","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,OAAOC,eAAP,MAA4B,mCAA5B,C,CACA;;AACA,MAAMC,cAAc,GAAGN,KAAK,CAACO,aAAN,CAAoB,IAApB,CAAvB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAM,CAACC,YAAD,EAAeC,UAAf,IAA6BR,QAAQ,EAA3C;AACA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBR,eAAe,CAC1C,2GAD0C,CAA5C;;AAIA,iBAAeS,IAAf,CAAoBC,YAApB,EAAkC;AAChC,QAAI;AACF,UAAI,CAACF,OAAL,EAAc;AACZ,cAAMF,UAAU,CAAC,CAAC,GAAGC,OAAJ,CAAD,CAAhB;AACD;AACF,KAJD,CAIE,OAAOI,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AACD,WAAO;AACLG,MAAAA,KAAK,EAAET,YADF;AAELU,MAAAA,aAAa,EAAE;AAFV,KAAP;AAID;;AAED,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBrB,UAAU,CAACG,OAAD,EAAUU,IAAV,CAAvC;AAEA,SAAOD,OAAO,GACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADY,GAGZ,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEQ,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,KAAK,CAACc,QADT,CAHF;AAOD,CA7BD;;AA8BA,SAASjB,cAAT,EAAyBE,eAAzB","sourcesContent":["import React, { useReducer, useEffect, useState } from 'react';\r\nimport { reducer } from '../../reducers/productReducer';\r\nimport useDataFetching from './../custom_hooks/useDataFetching';\r\n// Try setting the useDataFetching hook here\r\nconst ProductContext = React.createContext(null);\r\n\r\nconst ProductProvider = (props) => {\r\n  const [pagedResults, setResults] = useState();\r\n  const { results, loading } = useDataFetching(\r\n    'https://raw.githubusercontent.com/mwayne16/e-commerce_bicycle/master/src/components/data/application.json'\r\n  );\r\n\r\n  async function init(initialState) {\r\n    try {\r\n      if (!loading) {\r\n        await setResults([...results]);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return {\r\n      items: pagedResults,\r\n      filteredItems: [],\r\n    };\r\n  }\r\n\r\n  const [products, dispatch] = useReducer(reducer, init);\r\n\r\n  return loading ? (\r\n    <h1>Loading....</h1>\r\n  ) : (\r\n    <ProductContext.Provider value={{ products, dispatch }}>\r\n      {props.children}\r\n    </ProductContext.Provider>\r\n  );\r\n};\r\nexport { ProductContext, ProductProvider };\r\n"]},"metadata":{},"sourceType":"module"}