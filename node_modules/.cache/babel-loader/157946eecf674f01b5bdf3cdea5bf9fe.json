{"ast":null,"code":"import _slicedToArray from\"E:\\\\React_Projects\\\\e-commerce_bicycle\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import Modal from'../modals/Modal';import{CartModal}from'../modals/CartWidget';//Create an abstracted Modal Component that accepts props.children. Could use component styles or import multiple styles from css\n// Perhaps the context could be in the useModal hook so that the modal being used is dynamic to thimport ProductModal from './ProductModal';\n//e isntance of the hook call\nvar portal=document.querySelector('#cart-modal');var CartModalContext=React.createContext(null);var ModalProvider=function ModalProvider(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),toggled=_useState2[0],setToggle=_useState2[1];// Put cart Modal between <Modal></Modal>\nreturn/*#__PURE__*/React.createElement(CartModalContext.Provider,{value:[toggled,setToggle]},/*#__PURE__*/React.createElement(Modal,{toggled:toggled,location:portal},/*#__PURE__*/React.createElement(CartModal,null)),props.children);};// const ModalContext = React.createContext(() => {\n//   const { toggled, handleModal, modalContent } = useModalToggle();\n//   return (\n//     <ModalContext.Provider\n//       value={{ toggled, handleModal, modalContent }}\n//     ></ModalContext.Provider>\n//   );\n// });\n// let ModalProvider = ({ children }) => {};\n// export { ModalContext, ModalProvider };\nexport{CartModalContext,ModalProvider};","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/client/src/components/context/modalContext.js"],"names":["React","useState","Modal","CartModal","portal","document","querySelector","CartModalContext","createContext","ModalProvider","props","toggled","setToggle","children"],"mappings":"kKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,OAASC,SAAT,KAA0B,sBAA1B,CACA;AACA;AACA;AAEA,GAAMC,CAAAA,MAAM,CAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAf,CACA,GAAMC,CAAAA,gBAAgB,CAAGP,KAAK,CAACQ,aAAN,CAAoB,IAApB,CAAzB,CACA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAW,eACFT,QAAQ,CAAC,KAAD,CADN,wCACxBU,OADwB,eACfC,SADe,eAG/B;AACA,mBACE,oBAAC,gBAAD,CAAkB,QAAlB,EAA2B,KAAK,CAAE,CAACD,OAAD,CAAUC,SAAV,CAAlC,eACE,oBAAC,KAAD,EAAO,OAAO,CAAED,OAAhB,CAAyB,QAAQ,CAAEP,MAAnC,eACE,oBAAC,SAAD,MADF,CADF,CAIGM,KAAK,CAACG,QAJT,CADF,CAQD,CAZD,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA,OAASN,gBAAT,CAA2BE,aAA3B","sourcesContent":["import React, { useState } from 'react';\r\nimport Modal from '../modals/Modal';\r\nimport { CartModal } from '../modals/CartWidget';\r\n//Create an abstracted Modal Component that accepts props.children. Could use component styles or import multiple styles from css\r\n// Perhaps the context could be in the useModal hook so that the modal being used is dynamic to thimport ProductModal from './ProductModal';\r\n//e isntance of the hook call\r\n\r\nconst portal = document.querySelector('#cart-modal');\r\nconst CartModalContext = React.createContext(null);\r\nconst ModalProvider = (props) => {\r\n  const [toggled, setToggle] = useState(false);\r\n\r\n  // Put cart Modal between <Modal></Modal>\r\n  return (\r\n    <CartModalContext.Provider value={[toggled, setToggle]}>\r\n      <Modal toggled={toggled} location={portal}>\r\n        <CartModal />\r\n      </Modal>\r\n      {props.children}\r\n    </CartModalContext.Provider>\r\n  );\r\n};\r\n// const ModalContext = React.createContext(() => {\r\n//   const { toggled, handleModal, modalContent } = useModalToggle();\r\n//   return (\r\n//     <ModalContext.Provider\r\n//       value={{ toggled, handleModal, modalContent }}\r\n//     ></ModalContext.Provider>\r\n//   );\r\n// });\r\n\r\n// let ModalProvider = ({ children }) => {};\r\n\r\n// export { ModalContext, ModalProvider };\r\nexport { CartModalContext, ModalProvider };\r\n"]},"metadata":{},"sourceType":"module"}