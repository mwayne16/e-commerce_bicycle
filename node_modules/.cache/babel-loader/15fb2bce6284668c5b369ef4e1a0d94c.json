{"ast":null,"code":"var _jsxFileName = \"E:\\\\React_Projects\\\\e-commerce_bicycle\\\\src\\\\components\\\\context\\\\productContext.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport { reducer } from '../../reducers/productReducer';\nimport useDataFetching from './../custom_hooks/useDataFetching'; // Try setting the useDataFetching hook here\n\nconst ProductContext = React.createContext(null);\n\nconst ProductProvider = props => {\n  const {\n    results,\n    loading\n  } = useDataFetching('https://raw.githubusercontent.com/mwayne16/e-commerce_bicycle/master/src/components/data/application.json');\n  const initialState = {\n    items: [],\n    filteredItems: []\n  };\n  useEffect(() => {\n    if (loading) {\n      return 'Loading...';\n    }\n\n    initialState.items.push(...results);\n  }, [results, initialState.items]);\n  const [products, dispatch] = useReducer(reducer, initialState);\n\n  if (loading) {\n    return 'Loading...';\n  }\n\n  return React.createElement(ProductContext.Provider, {\n    value: {\n      products,\n      dispatch\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, props.children);\n};\n\nexport { ProductContext, ProductProvider };","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/src/components/context/productContext.js"],"names":["React","useReducer","useEffect","reducer","useDataFetching","ProductContext","createContext","ProductProvider","props","results","loading","initialState","items","filteredItems","push","products","dispatch","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,OAAOC,eAAP,MAA4B,mCAA5B,C,CACA;;AACA,MAAMC,cAAc,GAAGL,KAAK,CAACM,aAAN,CAAoB,IAApB,CAAvB;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBN,eAAe,CAC1C,2GAD0C,CAA5C;AAGA,QAAMO,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAE,EADY;AAEnBC,IAAAA,aAAa,EAAE;AAFI,GAArB;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,OAAJ,EAAa;AACX,aAAO,YAAP;AACD;;AACDC,IAAAA,YAAY,CAACC,KAAb,CAAmBE,IAAnB,CAAwB,GAAGL,OAA3B;AACD,GALQ,EAKN,CAACA,OAAD,EAAUE,YAAY,CAACC,KAAvB,CALM,CAAT;AAOA,QAAM,CAACG,QAAD,EAAWC,QAAX,IAAuBf,UAAU,CAACE,OAAD,EAAUQ,YAAV,CAAvC;;AACA,MAAID,OAAJ,EAAa;AACX,WAAO,YAAP;AACD;;AAED,SACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEK,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,KAAK,CAACS,QADT,CADF;AAKD,CAzBD;;AA0BA,SAASZ,cAAT,EAAyBE,eAAzB","sourcesContent":["import React, { useReducer, useEffect } from 'react';\r\nimport { reducer } from '../../reducers/productReducer';\r\nimport useDataFetching from './../custom_hooks/useDataFetching';\r\n// Try setting the useDataFetching hook here\r\nconst ProductContext = React.createContext(null);\r\nconst ProductProvider = (props) => {\r\n  const { results, loading } = useDataFetching(\r\n    'https://raw.githubusercontent.com/mwayne16/e-commerce_bicycle/master/src/components/data/application.json'\r\n  );\r\n  const initialState = {\r\n    items: [],\r\n    filteredItems: [],\r\n  };\r\n  useEffect(() => {\r\n    if (loading) {\r\n      return 'Loading...';\r\n    }\r\n    initialState.items.push(...results);\r\n  }, [results, initialState.items]);\r\n\r\n  const [products, dispatch] = useReducer(reducer, initialState);\r\n  if (loading) {\r\n    return 'Loading...';\r\n  }\r\n\r\n  return (\r\n    <ProductContext.Provider value={{ products, dispatch }}>\r\n      {props.children}\r\n    </ProductContext.Provider>\r\n  );\r\n};\r\nexport { ProductContext, ProductProvider };\r\n"]},"metadata":{},"sourceType":"module"}