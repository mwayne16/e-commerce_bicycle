{"ast":null,"code":"import { useEffect, useState, useCallback } from 'react';\nimport { initialState } from '../../reducers/productReducer';\n\nfunction useLocalStorage(key) {\n  const [state, setState] = useState(window.localStorage.getItem(key) !== null || undefined ? window.localStorage.getItem(key) : null);\n  let values = []; // Consider just having the key as a useRef with return callbacks for setting and getting data\n\n  console.log(values);\n  useEffect(() => {\n    window.localStorage.setItem(key, values);\n  }, [key, values]);\n  return {\n    state,\n    setState,\n    addValue: useCallback(value => {\n      values.push(value);\n      console.log(value);\n    }, [values])\n  };\n}\n\nexport default useLocalStorage;","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/src/components/custom_hooks/useLocalStorage.js"],"names":["useEffect","useState","useCallback","initialState","useLocalStorage","key","state","setState","window","localStorage","getItem","undefined","values","console","log","setItem","addValue","value","push"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,YAAT,QAA6B,+BAA7B;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAChCO,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,MAAqC,IAArC,IAA6CM,SAA7C,GACIH,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CADJ,GAEI,IAH4B,CAAlC;AAKA,MAAIO,MAAM,GAAG,EAAb,CAN4B,CAQ5B;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4BV,GAA5B,EAAiCO,MAAjC;AACD,GAFQ,EAEN,CAACP,GAAD,EAAMO,MAAN,CAFM,CAAT;AAIA,SAAO;AACLN,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLS,IAAAA,QAAQ,EAAEd,WAAW,CAClBe,KAAD,IAAW;AACTL,MAAAA,MAAM,CAACM,IAAP,CAAYD,KAAZ;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD,KAJkB,EAKnB,CAACL,MAAD,CALmB;AAHhB,GAAP;AAWD;;AACD,eAAeR,eAAf","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\nimport { initialState } from '../../reducers/productReducer';\r\n\r\nfunction useLocalStorage(key) {\r\n  const [state, setState] = useState(\r\n    window.localStorage.getItem(key) !== null || undefined\r\n      ? window.localStorage.getItem(key)\r\n      : null\r\n  );\r\n  let values = [];\r\n\r\n  // Consider just having the key as a useRef with return callbacks for setting and getting data\r\n  console.log(values);\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, values);\r\n  }, [key, values]);\r\n\r\n  return {\r\n    state,\r\n    setState,\r\n    addValue: useCallback(\r\n      (value) => {\r\n        values.push(value);\r\n        console.log(value);\r\n      },\r\n      [values]\r\n    ),\r\n  };\r\n}\r\nexport default useLocalStorage;\r\n"]},"metadata":{},"sourceType":"module"}