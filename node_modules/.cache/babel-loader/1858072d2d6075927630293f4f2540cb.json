{"ast":null,"code":"var _jsxFileName = \"E:\\\\React_Projects\\\\e-commerce_bicycle\\\\src\\\\components\\\\modals\\\\modalContext.js\";\nimport React from 'react';\nimport useModalToggle from '../custom_hooks/useModalToggle';\nimport ProductModal from './ProductModal'; // Perhaps the context could be in the useModal hook so that the modal being used is dynamic to the isntance of the hook call\n\nlet ModalContext;\nconst {\n  Provider\n} = ModalContext = React.createContext(null);\n\nconst ModalProvider = props => {\n  const {\n    toggled,\n    handleModal,\n    modal\n  } = useModalToggle();\n  console.log(modal.name);\n  return React.createElement(Provider, {\n    value: {\n      toggled,\n      handleModal,\n      modal\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, modal === ProductModal && React.createElement(ProductModal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }), props.children);\n}; // const ModalContext = React.createContext(() => {\n//   const { toggled, handleModal, modalContent } = useModalToggle();\n//   return (\n//     <ModalContext.Provider\n//       value={{ toggled, handleModal, modalContent }}\n//     ></ModalContext.Provider>\n//   );\n// });\n// let ModalProvider = ({ children }) => {};\n// export { ModalContext, ModalProvider };\n\n\nexport { ModalContext, ModalProvider };","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/src/components/modals/modalContext.js"],"names":["React","useModalToggle","ProductModal","ModalContext","Provider","createContext","ModalProvider","props","toggled","handleModal","modal","console","log","name","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;AACA,IAAIC,YAAJ;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,YAAY,GAAGH,KAAK,CAACK,aAAN,CAAoB,IAApB,CAArC;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,MAAkCT,cAAc,EAAtD;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,IAAlB;AACA,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAEL,MAAAA,OAAF;AAAWC,MAAAA,WAAX;AAAwBC,MAAAA;AAAxB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,KAAKR,YAAV,IAA0B,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD7B,EAEGK,KAAK,CAACO,QAFT,CADF;AAMD,CATD,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AACA,SAASX,YAAT,EAAuBG,aAAvB","sourcesContent":["import React from 'react';\r\nimport useModalToggle from '../custom_hooks/useModalToggle';\r\nimport ProductModal from './ProductModal';\r\n\r\n// Perhaps the context could be in the useModal hook so that the modal being used is dynamic to the isntance of the hook call\r\nlet ModalContext;\r\nconst { Provider } = (ModalContext = React.createContext(null));\r\nconst ModalProvider = (props) => {\r\n  const { toggled, handleModal, modal } = useModalToggle();\r\n  console.log(modal.name);\r\n  return (\r\n    <Provider value={{ toggled, handleModal, modal }}>\r\n      {modal === ProductModal && <ProductModal />}\r\n      {props.children}\r\n    </Provider>\r\n  );\r\n};\r\n// const ModalContext = React.createContext(() => {\r\n//   const { toggled, handleModal, modalContent } = useModalToggle();\r\n//   return (\r\n//     <ModalContext.Provider\r\n//       value={{ toggled, handleModal, modalContent }}\r\n//     ></ModalContext.Provider>\r\n//   );\r\n// });\r\n\r\n// let ModalProvider = ({ children }) => {};\r\n\r\n// export { ModalContext, ModalProvider };\r\nexport { ModalContext, ModalProvider };\r\n"]},"metadata":{},"sourceType":"module"}