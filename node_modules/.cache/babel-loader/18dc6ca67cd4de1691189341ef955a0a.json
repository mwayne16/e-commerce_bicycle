{"ast":null,"code":"var _jsxFileName = \"E:\\\\React_Projects\\\\e-commerce_bicycle\\\\src\\\\components\\\\context\\\\modalContext.js\";\nimport React, { useState } from 'react';\nimport Modal from './Modal';\nimport { CartModal } from './CartWidget';\nimport ProductModal from './ProductModal'; //Create an abstracted Modal Component that accepts props.children. Could use component styles or import multiple styles from css\n// Perhaps the context could be in the useModal hook so that the modal being used is dynamic to thimport ProductModal from './ProductModal';\n//e isntance of the hook call\n\nconst portal = document.querySelector('#cart-modal');\nconst CartModalContext = React.createContext(null);\n\nconst ModalProvider = props => {\n  const [toggled, setToggle] = useState(false); // Put cart Modal between <Modal></Modal>\n\n  return React.createElement(CartModalContext.Provider, {\n    value: [toggled, setToggle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    toggled: toggled,\n    location: portal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(CartModal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  })), props.children);\n}; // const ModalContext = React.createContext(() => {\n//   const { toggled, handleModal, modalContent } = useModalToggle();\n//   return (\n//     <ModalContext.Provider\n//       value={{ toggled, handleModal, modalContent }}\n//     ></ModalContext.Provider>\n//   );\n// });\n// let ModalProvider = ({ children }) => {};\n// export { ModalContext, ModalProvider };\n\n\nexport { CartModalContext, ModalProvider };","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/src/components/context/modalContext.js"],"names":["React","useState","Modal","CartModal","ProductModal","portal","document","querySelector","CartModalContext","createContext","ModalProvider","props","toggled","setToggle","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CACA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAf;AACA,MAAMC,gBAAgB,GAAGR,KAAK,CAACS,aAAN,CAAoB,IAApB,CAAzB;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAM,CAACC,OAAD,EAAUC,SAAV,IAAuBZ,QAAQ,CAAC,KAAD,CAArC,CAD+B,CAG/B;;AACA,SACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE,CAACW,OAAD,EAAUC,SAAV,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAED,OAAhB;AAAyB,IAAA,QAAQ,EAAEP,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIGM,KAAK,CAACG,QAJT,CADF;AAQD,CAZD,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AACA,SAASN,gBAAT,EAA2BE,aAA3B","sourcesContent":["import React, { useState } from 'react';\r\nimport Modal from './Modal';\r\nimport { CartModal } from './CartWidget';\r\nimport ProductModal from './ProductModal';\r\n//Create an abstracted Modal Component that accepts props.children. Could use component styles or import multiple styles from css\r\n// Perhaps the context could be in the useModal hook so that the modal being used is dynamic to thimport ProductModal from './ProductModal';\r\n//e isntance of the hook call\r\n\r\nconst portal = document.querySelector('#cart-modal');\r\nconst CartModalContext = React.createContext(null);\r\nconst ModalProvider = (props) => {\r\n  const [toggled, setToggle] = useState(false);\r\n\r\n  // Put cart Modal between <Modal></Modal>\r\n  return (\r\n    <CartModalContext.Provider value={[toggled, setToggle]}>\r\n      <Modal toggled={toggled} location={portal}>\r\n        <CartModal />\r\n      </Modal>\r\n      {props.children}\r\n    </CartModalContext.Provider>\r\n  );\r\n};\r\n// const ModalContext = React.createContext(() => {\r\n//   const { toggled, handleModal, modalContent } = useModalToggle();\r\n//   return (\r\n//     <ModalContext.Provider\r\n//       value={{ toggled, handleModal, modalContent }}\r\n//     ></ModalContext.Provider>\r\n//   );\r\n// });\r\n\r\n// let ModalProvider = ({ children }) => {};\r\n\r\n// export { ModalContext, ModalProvider };\r\nexport { CartModalContext, ModalProvider };\r\n"]},"metadata":{},"sourceType":"module"}