{"ast":null,"code":"var _jsxFileName = \"E:\\\\React_Projects\\\\e-commerce_bicycle\\\\src\\\\components\\\\modals\\\\modalContext.js\";\nimport React from 'react';\nimport useModalToggle from '../custom_hooks/useModalToggle';\nimport ProductModal from './ProductModal'; // Perhaps the context could be in the useModal hook so that the modal being used is dynamic to the isntance of the hook call\n\nconst ModalContext = React.createContext(() => {\n  const {\n    toggled,\n    handleModal,\n    modalContent\n  } = useModalToggle();\n  return React.createElement(ModalContext.Provider, {\n    value: {\n      toggled,\n      handleModal,\n      modalContent\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  });\n});\n\nlet ModalProvider = ({\n  children\n}) => {};\n\nexport { ModalContext, ModalProvider };","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/src/components/modals/modalContext.js"],"names":["React","useModalToggle","ProductModal","ModalContext","createContext","toggled","handleModal","modalContent","ModalProvider","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CACA;;AACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,aAAN,CAAoB,MAAM;AAC7C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,MAAyCN,cAAc,EAA7D;AACA,SACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AAAEI,MAAAA,OAAF;AAAWC,MAAAA,WAAX;AAAwBC,MAAAA;AAAxB,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKD,CAPoB,CAArB;;AASA,IAAIC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB,CAAE,CAAxC;;AAEA,SAASN,YAAT,EAAuBK,aAAvB","sourcesContent":["import React from 'react';\r\nimport useModalToggle from '../custom_hooks/useModalToggle';\r\nimport ProductModal from './ProductModal';\r\n// Perhaps the context could be in the useModal hook so that the modal being used is dynamic to the isntance of the hook call\r\nconst ModalContext = React.createContext(() => {\r\n  const { toggled, handleModal, modalContent } = useModalToggle();\r\n  return (\r\n    <ModalContext.Provider\r\n      value={{ toggled, handleModal, modalContent }}\r\n    ></ModalContext.Provider>\r\n  );\r\n});\r\n\r\nlet ModalProvider = ({ children }) => {};\r\n\r\nexport { ModalContext, ModalProvider };\r\n"]},"metadata":{},"sourceType":"module"}