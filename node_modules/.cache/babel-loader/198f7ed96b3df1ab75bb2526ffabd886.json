{"ast":null,"code":"import { useCallback, useState } from 'react';\n\nconst useArray = (initial, range) => {\n  const [value, setValue] = useState(initial);\n  const [priceRange, updatedRange] = useState(range);\n  return {\n    value,\n    setValue,\n    filterByPrice: useCallback(() => {\n      return setValue(initial.filter(v => v.price >= range ? console.log(v) : null)), [priceRange, initial];\n    }),\n    filterByColor: useCallback(c => setValue(arr => arr.filter(v => v.color === c)), []),\n    sortAscending: () => setValue(arr => arr.sort((a, b) => a.price - b.price))\n  };\n};\n\nexport default useArray; // useEffect(() => {\n//   async function DatatoFilter() {\n//     let data = props.results;\n//     if (props.loading) {\n//       return;\n//     }\n//     try {\n//       data\n//         .filter(product => product.price - product.sale >= props.min.price)\n//         .map(product => console.log(product));\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n//   DatatoFilter();\n// }, [props]);","map":{"version":3,"sources":["E:/React_Projects/e-commerce_bicycle/src/components/useArray.js"],"names":["useCallback","useState","useArray","initial","range","value","setValue","priceRange","updatedRange","filterByPrice","filter","v","price","console","log","filterByColor","c","arr","color","sortAscending","sort","a","b"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAEA,MAAMC,QAAQ,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACE,OAAD,CAAlC;AACA,QAAM,CAACI,UAAD,EAAaC,YAAb,IAA6BP,QAAQ,CAACG,KAAD,CAA3C;AAEA,SAAO;AACLC,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLG,IAAAA,aAAa,EAAET,WAAW,CAAC,MAAM;AAC/B,aACEM,QAAQ,CACNH,OAAO,CAACO,MAAR,CAAeC,CAAC,IAAKA,CAAC,CAACC,KAAF,IAAWR,KAAX,GAAmBS,OAAO,CAACC,GAAR,CAAYH,CAAZ,CAAnB,GAAoC,IAAzD,CADM,CAAR,EAGA,CAACJ,UAAD,EAAaJ,OAAb,CAJF;AAMD,KAPyB,CAHrB;AAWLY,IAAAA,aAAa,EAAEf,WAAW,CACxBgB,CAAC,IAAIV,QAAQ,CAACW,GAAG,IAAIA,GAAG,CAACP,MAAJ,CAAWC,CAAC,IAAIA,CAAC,CAACO,KAAF,KAAYF,CAA5B,CAAR,CADW,EAExB,EAFwB,CAXrB;AAeLG,IAAAA,aAAa,EAAE,MAAMb,QAAQ,CAACW,GAAG,IAAIA,GAAG,CAACG,IAAJ,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACT,KAAF,GAAUU,CAAC,CAACV,KAA/B,CAAR;AAfxB,GAAP;AAiBD,CArBD;;AAsBA,eAAeV,QAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useCallback, useState } from 'react';\r\n\r\nconst useArray = (initial, range) => {\r\n  const [value, setValue] = useState(initial);\r\n  const [priceRange, updatedRange] = useState(range);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    filterByPrice: useCallback(() => {\r\n      return (\r\n        setValue(\r\n          initial.filter(v => (v.price >= range ? console.log(v) : null))\r\n        ),\r\n        [priceRange, initial]\r\n      );\r\n    }),\r\n    filterByColor: useCallback(\r\n      c => setValue(arr => arr.filter(v => v.color === c)),\r\n      []\r\n    ),\r\n    sortAscending: () => setValue(arr => arr.sort((a, b) => a.price - b.price))\r\n  };\r\n};\r\nexport default useArray;\r\n\r\n// useEffect(() => {\r\n//   async function DatatoFilter() {\r\n//     let data = props.results;\r\n//     if (props.loading) {\r\n//       return;\r\n//     }\r\n//     try {\r\n//       data\r\n//         .filter(product => product.price - product.sale >= props.min.price)\r\n//         .map(product => console.log(product));\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   }\r\n//   DatatoFilter();\r\n// }, [props]);\r\n"]},"metadata":{},"sourceType":"module"}